# -*- encoding: utf-8 -*-
# sage
'''
@File    :   exp_me.sage
@Time    :   2021/02/10 15:05:20
@Author  :   ljahum 
@Contact :   roomoflja@gmail.com
@Desc    :   None
'''


# This file was *autogenerated* from the file exp_me.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_255 = Integer(255); _sage_const_19 = Integer(19); _sage_const_0 = Integer(0); _sage_const_486662 = Integer(486662); _sage_const_1 = Integer(1); _sage_const_9 = Integer(9); _sage_const_10001 = Integer(10001); _sage_const_8 = Integer(8)
# code here

from os import environ
environ['PWNLIB_NOTERM'] = 'True'
from pwn import remote
from hashlib import sha256


ha = lambda x: x if isinstance(x, int) or isinstance(x, Integer) else product(x.xy())


hashs = lambda *x: int.from_bytes(
    sha256(b'.'.join([b'%X' % ha(x) for x in x])).digest(), 'little') % p


def hashp(x):
    x = hashs((x))
    while True:
        try:
            return E.lift_x(x)
        except:
            x = hashs((x))


E = EllipticCurve(GF(_sage_const_2  ** _sage_const_255  - _sage_const_19 ), [_sage_const_0 , _sage_const_486662 , _sage_const_0 , _sage_const_1 , _sage_const_0 ])
p = E.order()
ZmodP = Zmod(p)
G = E.lift_x(_sage_const_9 )
cn = remote('0.0.0.0', _sage_const_10001 )
data = cn.recvline().decode().strip()
print(data)
x = int(data.split()[_sage_const_0 ])
P = x*G
m = int(data.split()[-_sage_const_1 ])

tot =_sage_const_0  
while tot <_sage_const_8 :
    a = randint(_sage_const_1 , p)
    b = randint(_sage_const_1 , p)
    aG = a*G
    bG = b*G
    e = hashs(m, aG, bG)
    if not e & _sage_const_1 : 
        print('try again')
        continue
    s =  a - e*x
    e_inv = inverse_mod(e,p)
    I = e_inv*(bG - s*hashp(P))
    Ix = I.xy()[_sage_const_0 ]
    Iy = I.xy()[_sage_const_1 ]
    cn.sendlineafter('I (x): ', str(Ix))
    cn.sendlineafter('I (y): ', str(Iy))
    cn.sendlineafter('e: ', str(e))
    cn.sendlineafter('s: ', str(s))
    cn.recvline()
    tot += _sage_const_1 
print(cn.recvall())

