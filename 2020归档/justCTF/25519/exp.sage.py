

# This file was *autogenerated* from the file exp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_255 = Integer(255); _sage_const_19 = Integer(19); _sage_const_0 = Integer(0); _sage_const_486662 = Integer(486662); _sage_const_1 = Integer(1); _sage_const_9 = Integer(9); _sage_const_10001 = Integer(10001); _sage_const_8 = Integer(8)
from os import environ
environ['PWNLIB_NOTERM'] = 'True'
from pwn import remote
from hashlib import sha256

ha = lambda x: x if isinstance(x, int) or isinstance(x, Integer) else product(x.xy())
hashs = lambda *x: int.from_bytes(sha256(b'.'.join([b'%X' % ha(x) for x in x])).digest(), 'little') % p

def hashp(x):
    x = hashs((x))
    while True:
        try:
            return E.lift_x(x)
        except:
            x = hashs((x))

E = EllipticCurve(GF(_sage_const_2 **_sage_const_255  - _sage_const_19 ), [_sage_const_0 , _sage_const_486662 , _sage_const_0 , _sage_const_1 , _sage_const_0 ])
p = E.order()
ZmodP = Zmod(p)
G = E.lift_x(_sage_const_9 )

conn = remote('0.0.0.0', _sage_const_10001 )
data = conn.recvline().decode().strip()
x = int(data.split()[_sage_const_0 ])
P = x*G
m = int(data.split()[-_sage_const_1 ])

wins = _sage_const_0 
while wins < _sage_const_8 :
    c = randint(_sage_const_1 , p)
    e = hashs(m, c*G, c*G)
    if not e & _sage_const_1 : 
        print('try again')
        continue
    s = c - e*x
    I = inverse_mod(e, p)*(c*G - s*hashp(P))
    # print(I.xy()[0])
    # print(I.xy()[1])
    conn.sendlineafter('I (x): ', str(I.xy()[_sage_const_0 ]))
    conn.sendlineafter('I (y): ', str(I.xy()[_sage_const_1 ]))
    conn.sendlineafter('e: ', str(e))
    conn.sendlineafter('s: ', str(s))
    conn.recvline()
    wins += _sage_const_1 

print(conn.recvline().decode())

