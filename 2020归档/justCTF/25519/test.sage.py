

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_255 = Integer(255); _sage_const_19 = Integer(19); _sage_const_0 = Integer(0); _sage_const_486662 = Integer(486662); _sage_const_1 = Integer(1); _sage_const_9 = Integer(9)# from os import environ
# environ['PWNLIB_NOTERM'] = 'True'
# from pwn import remote
from hashlib import sha256

ha = lambda x: x if isinstance(x, int) or isinstance(x, Integer) else product(x.xy())
hashs = lambda *x: int.from_bytes(sha256(b'.'.join([b'%X' % ha(x) for x in x])).digest(), 'little') % p
hashs = lambda *x: int.from_bytes(sha256(b'.'.join([b'%X' % ha(x) for x in x])).digest(), 'little') % p

def hashp(x):
    x = hashs((x))
    while True:
        try:
            return E.lift_x(x)
        except:
            x = hashs((x))
from Crypto.Util.number import *
E = EllipticCurve(GF(_sage_const_2 **_sage_const_255  - _sage_const_19 ), [_sage_const_0 , _sage_const_486662 , _sage_const_0 , _sage_const_1 , _sage_const_0 ])
p = E.order()
ZmodP = Zmod(p)
G = E.lift_x(_sage_const_9 )
m0 = randint(_sage_const_1 , p-_sage_const_1 )
m=m0
m1 = b'admin'
m = m1.hex() + long_to_bytes(m).hex()[len(m1.hex()):]
print(bytes_to_long( bytes.fromhex(m))-p,m0)

