# myRSA
from Crypto.Util.number import getPrime,bytes_to_long as b2l
from icecream import *
from gmpy2 import iroot
from icecream import *
from typing import Coroutine, Counter
from Crypto.Util.number import getPrime,bytes_to_long as b2l, inverse
from math import gcd
import sympy as sp  # 导入sympy包
import hashlib
from tqdm import tqdm
from rich.progress import track
from rich.traceback import install
install()
p=10740702521489181633203201218539208307246666553618614074925071064485234081690288579518402265521558198274343193486570713531141127656057292185126067379858451
q=11982734365910634052296533456162290177963441565890008379730298690581772909909460317102073184781139356359003046410503405104255738527933949476596043180036539

def getpq(n,e,enc,c):
    tmp = 400000
    ic(tmp)
    ans = enc//c -tmp -4*n
    
    x = sp.Symbol('x')  # 定义符号变量
    f = x**3 - x**2 + x - ans  # 定义要求解的一元三次方程
    ans = sp.solve(f)
    print(ans)
    
    t = int(ans[2].round())
    ic(t)
    tmp = iroot(t*t-4*n,2)
    ic(tmp)
    if(tmp[1] == True):
        delta = tmp[0]
        p = (t+delta)//2
        ans = t**3 - t**2 + t
        print(n%p)
        ic(p)
        return p
    
n = 66027874281672625418586014781126070908243950646389324074550248999679090401150270793389452270314828298481437497840416396018574761898600856029902467560028361877554457938912404358968210921272837218306889478597234820590780596868027285957738861052042217870708996313230729115851397741357365848182263953315379303203
e = 65537

enc = 2786282534107784071949674754303734020650420550514064517704448066809278965224884310691670432441397979710035489386642473027744366146283566077172758576117265010888225901430814453103910642061532363684990980080593171873048076522753507082554621333455105446034271978972878134597921516292423901550995709181303022297139396128082022193615685724911328311390083321186035987746342068856533118816750276771278003232809361817465525887406183533073435476911136829775173155132394236172457900926847903014330722145729653282601258124899631596559793043199596264295846181613188399943356771658381560774428425036945242894731920547142207496951001372212394788053725065262462489938796299464287972476543278196732420981982981923866883740677815684307375214870832207719694203331026829445710224285190480
message = b'1231231312312312313123'
c = pow(b2l(message),e,n)



getpq(n,e,enc,c)

# message = b'1231231312312312313123'
    # c = pow(b2l(message),e,n)
    # print(c)
    # c = 98036951754337032344243178748515560841165604254027061988891364524891739832553164992394753187810654356859866789873544662619495383643807145421137395955964923088520813174972668218212553246523113885321810922025353841866393092299527627648876944913684952292085416314954991635129637034099628922534736755727598640442