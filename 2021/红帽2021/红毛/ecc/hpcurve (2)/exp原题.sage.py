

# This file was *autogenerated* from the file exp原题.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10000000000000001119 = Integer(10000000000000001119); _sage_const_7 = Integer(7); _sage_const_0 = Integer(0); _sage_const_8 = Integer(8); _sage_const_16 = Integer(16); _sage_const_24 = Integer(24); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1)
from binascii import unhexlify, hexlify
from itertools import permutations

p = _sage_const_10000000000000001119 
k = GF(p)
kc = k.algebraic_closure()

p = _sage_const_10000000000000001119 
R = GF(p)['x']; (x,) = R._first_ngens(1)
y=x
f = y + y**_sage_const_7 
C = HyperellipticCurve(f, _sage_const_0 )
J = C.jacobian()


msg_prefix = b"Hello! The flag is: hxp{"
# msg_prefix = b'aaaaaaaaaaaaaaaaaaaaflag'

# with open("output.txt") as f:
#     content = unhexlify(f.read().strip())
content = bytes.fromhex('9e6ab3ff11232e0c5d7ce94d3538fb73e5139749a1247b0b5c2221e2593efd58ddbdae697191781914c94f8d40')

bs = []
for c, m in zip(content, msg_prefix):
    # Do the XOR, obtain k
    b = c^m
    print(b)
    bs.append(b)

u0 = int.from_bytes(bytes(bs[:_sage_const_8 ]), byteorder="little")
u1 = int.from_bytes(bytes(bs[_sage_const_8 :_sage_const_16 ]), byteorder="little")
u2 = int.from_bytes(bytes(bs[_sage_const_16 :_sage_const_24 ]), byteorder="little")
print(hex(u0), hex(u1), hex(u2))

ps = x**_sage_const_3  + u2 * x**_sage_const_2  + u1 * x + u0  # TODO: this ordering might be the other way around.
aps_roots = ps.roots(ring=kc, multiplicities=False)
x0, x1, x2 = aps_roots

A = Matrix(((x0**_sage_const_2 , x0, kc(_sage_const_1 )), (x1**_sage_const_2 , x1, kc(_sage_const_1 )), (x2**_sage_const_2 , x2, kc(_sage_const_1 ))))
Y = vector((x0**_sage_const_7  + x0, x1**_sage_const_7  + x1, x2**_sage_const_7  + x2))
Ys = vector((-Y[_sage_const_0 ].sqrt(), -Y[_sage_const_1 ].sqrt(), -Y[_sage_const_2 ].sqrt())) # TODO: Maybe the other sqrt?

v = A.solve_right(Ys)
print(v)
v0 = int(str(v[_sage_const_0 ])).to_bytes(_sage_const_8 , byteorder="little")
v1 = int(str(v[_sage_const_1 ])).to_bytes(_sage_const_8 , byteorder="little")
v2 = int(str(v[_sage_const_2 ])).to_bytes(_sage_const_8 , byteorder="little")

for a0, a1, a2 in permutations((v0, v1, v2)):
    cs = []
    q = bytes(bs) + a0 + a1 + a2
    print(q)
    for i in range(len(content)):
        b = content[i]^q[i%len(q)]
        cs.append(chr(b))
    # for c, m in zip(content, q):
    #     # Do the XOR, obtain k
    #     b = c^^m
    #     cs.append(chr(b))
    print("".join(cs))

