

# This file was *autogenerated* from the file py3版本.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10000000000000001119 = Integer(10000000000000001119); _sage_const_7 = Integer(7); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_11 = Integer(11); _sage_const_22 = Integer(22); _sage_const_33 = Integer(33)
import struct
from random import SystemRandom
# from icecream import *

from rich import *
# ----------------------------
p = _sage_const_10000000000000001119 
R = GF(p)['x']; (x,) = R._first_ngens(1)
y=x
f = y + y**_sage_const_7 
print(f)
C = HyperellipticCurve(f, _sage_const_0 )
J = C.jacobian()

es = [SystemRandom().randrange(p**_sage_const_3 ) for _ in range(_sage_const_3 )]


Ds = [J(C(x, min(f(x).sqrt(_sage_const_0 ,_sage_const_1 )))) for x in (_sage_const_11 ,_sage_const_22 ,_sage_const_33 )]
q = []
print(es)
print(Ds)


def clk():
	global Ds,es
	Ds = [e*D for e,D in zip(es, Ds)]
	return Ds

def generate():
    print('=========generate=')
    u,v = sum(clk())
    print(u)
    print()
    print(v)
    for i in range(_sage_const_3 ):
        print(u[i])
    rs = [u[i] for i in range(_sage_const_3 )] + [v[i] for i in range(_sage_const_3 )]
    
    q = struct.pack('<'+'Q'*len(rs), *rs)
    print(q[_sage_const_0 ],q[_sage_const_1 :])
    print(q)
    return rs
keys = generate()
print(len(keys))
print(keys)

