

# This file was *autogenerated* from the file 范围测试.sage
from sage.all_cmdline import *   # import sage library

_sage_const_50 = Integer(50); _sage_const_127100161070729758324672563005919585088843557718198754483704240637539097558639707938939488773101162471030823228170890483077236346261016177325635908356835505581986535187340920340593665014827853496914359725363307847082205643499778919067969907971712520095774370034152191123554145608254118099051528821309936123263 = Integer(127100161070729758324672563005919585088843557718198754483704240637539097558639707938939488773101162471030823228170890483077236346261016177325635908356835505581986535187340920340593665014827853496914359725363307847082205643499778919067969907971712520095774370034152191123554145608254118099051528821309936123263); _sage_const_58510083877094693891040277851267905853617844771064576929521712771940231668984770883328421254238895212042598002659174059244201616561130950785238401399837559644941651285130352373844849078590789578028528768860166902952495931639692465443534927973027133719331474369633030490640443060779278904144461746302422307614 = Integer(58510083877094693891040277851267905853617844771064576929521712771940231668984770883328421254238895212042598002659174059244201616561130950785238401399837559644941651285130352373844849078590789578028528768860166902952495931639692465443534927973027133719331474369633030490640443060779278904144461746302422307614); _sage_const_1 = Integer(1); _sage_const_256 = Integer(256); _sage_const_32356368081981984303650022185405262362706441106255860481013566773788039706726 = Integer(32356368081981984303650022185405262362706441106255860481013566773788039706726); _sage_const_1024 = Integer(1024); _sage_const_49 = Integer(49); _sage_const_0 = Integer(0)
# import string
# import random
# import socketserver
# import signal
# import codecs
import time
p1 = time.time()

from os import urandom
from hashlib import sha256
from random import randint
from Crypto.Util.number import inverse, getPrime, getRandomInteger
from icecream import *
n = _sage_const_50 
p = _sage_const_127100161070729758324672563005919585088843557718198754483704240637539097558639707938939488773101162471030823228170890483077236346261016177325635908356835505581986535187340920340593665014827853496914359725363307847082205643499778919067969907971712520095774370034152191123554145608254118099051528821309936123263 
# ts = [randint(1, p - 1) for _ in range(n - 1)]
t = _sage_const_58510083877094693891040277851267905853617844771064576929521712771940231668984770883328421254238895212042598002659174059244201616561130950785238401399837559644941651285130352373844849078590789578028528768860166902952495931639692465443534927973027133719331474369633030490640443060779278904144461746302422307614 
ts = [ t for _ in range(n - _sage_const_1 )]
secret_1 = getRandomInteger(_sage_const_256 )
secret_1 = _sage_const_32356368081981984303650022185405262362706441106255860481013566773788039706726 

def init_keys(ts, data, p):
    n = len(ts) + _sage_const_1 
    keys = []
    for _ in range(n):
        x = getRandomInteger(_sage_const_1024 )
        y = data
        for i in range(n - _sage_const_1 ):
            y = (y + ts[i] * pow(x, i + _sage_const_1 , p)) % p
        keys.append([x, y])
    return keys
ic(len(ts))
keys_1 = init_keys(ts, secret_1, p)

XS=[]
for i in range(_sage_const_49 ):
    xi = keys_1[i][_sage_const_0 ]
    xi_1 = keys_1[i+_sage_const_1 ][_sage_const_0 ]
    xs=[]
    for j in range(_sage_const_49 ):
        x1 = pow(xi,j+_sage_const_1 ,p)
        x2 = pow(xi_1,j+_sage_const_1 ,p)
        tmp = (x1-x2)%p
        xs.append(tmp)
    XS.append(xs)

YS =[]
for i in range(_sage_const_49 ):
    yi = keys_1[i][_sage_const_1 ]
    yi_1 = keys_1[i+_sage_const_1 ][_sage_const_1 ]
    YS.append([(yi-yi_1)%p])
# print(YS)
X = Matrix(Zmod(p),XS)
Y = Matrix(Zmod(p),YS)
invx = X.inverse()
T = invx*Y
print(ts)

TS = [i[_sage_const_0 ] for i in T]
print(TS)
ic(TS == ts)


p2 = time.time()
print(p2-p1)

