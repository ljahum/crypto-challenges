

# This file was *autogenerated* from the file test2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_512 = Integer(512); _sage_const_0p373 = RealNumber('0.373'); _sage_const_0p25 = RealNumber('0.25')
def gen_prime(size):
    p = random_prime(_sage_const_1  << size, lbound=_sage_const_1  << (size-_sage_const_1 ))
    while p % _sage_const_3  != _sage_const_2 :
        p = random_prime(_sage_const_1  << size, lbound=_sage_const_1  << (size-_sage_const_1 ))

    q = random_prime(_sage_const_1  << size, lbound=_sage_const_1  << (size-_sage_const_1 ))
    while q % _sage_const_3  != _sage_const_2 :
        q = random_prime(_sage_const_1  << size, lbound=_sage_const_1  << (size-_sage_const_1 ))

    if q > p:
        p, q = q, p

    return ZZ(p), ZZ(q)


SIZE = _sage_const_512 
p, q = gen_prime(SIZE)
n = p * q
y = random_prime(floor(n**_sage_const_0p373 ), proof=False)
a = int(((p-q) * round(n ** _sage_const_0p25 ) * y) // (_sage_const_3  * (p + q)))
b = (((p-q) * round(n ** _sage_const_0p25 ) * y) / (_sage_const_3  * (p + q)))

zbound =  int(((p-q) * round(n ** _sage_const_0p25 ) ) // (_sage_const_3  * (p + q)))
print(a)
print('================')
print(b-a)
print(zbound)

