
N=24158609192962667778130507695872192731573874466283844418424409162773676935195641843631198335031531435569550241147504860997558712387077579835793937800869850807256066746051530873142248629833946900111997411791514042674932572617419220369279359725042458219720315028575833090268822011911002455848955103886823969731155024206741758342855256144770557839259498144472454753941248921561967420699373905581313542524480388492028904104878991858911501524028485376172015731751132570450246283371311713696370927928536935680982952645724562008953735919008161901176003729728175715495764163016071819951420430261042399481938889292323471349309 
e1=3253788060686390082061335649093111806439493686557916688858009148414079142748009897080503364308304056673966935160889237192059166855433735295447816817076176923166670458104429166106718254714880049039654786512002417162192370620118950028121313343650472535380324034729059370003289302334729222542678616479451767716873588147234928884702028999344450101816113886247937865359762472195803939946850872258870424404583320545710432739051509607889853945697564972219552767915427338257452261357248756897798092533320993270636516133998788920749764211312758852161474500281183946225856194378612063666150135728157888000011117245538971819253 
e2=5774777509827502210559696683075734616374085893131614576915674436655838198292476596623362907879691186493716723947468488292659542290472144699990601543174610945254919322050752655114677979528322052667879459203424734062830175055365826468863948437643117741948681938837467643383267849945595215040225031923075173138707656123225371044662324274402761551323431565748230466183080363883346735573726554316061640550185000679335827084991308090073616237665394811811741337780135481947354811005626915637396082853797539682993534940195387828503953759271750612904782463866163897819679396529127946466958286951779154243215670873441512744769 
e3=3115470880955824516686706786091231077614917716889161221058469893701374894578791228252116969985945532172281771208382994478304618364314005198940748477229593888595605955417419616420741860415378252044980456106607204772910869267420117091289902969915143655143211967956292864189898603696509424134546918641321346578530105141129911203212476908380851010132362902856263111177834754276767956582359248279212601488824344592942568744726859318990915846316915856302343659960537146699778031409510693635694087402641866140219085342238451673852178825638374537761983515457742983640320724064941655744209314580856257335862896405934610313831 
cipher=22768196776850698416985089985645854150662599143164548503506213650665912026045573524675969689881873321765663789558948565730900587924672029875867023852830022298873989385022823039092602679994107801130875865584239194764131557524041781961012473214575376526297107482930212798685096687117191887593581416997771926249527998492495503240407239406786806868652992546517547551417095651926967680563194704387731531433776967208171190400409366889848321949482354738025558919575131519058211542483191528235241239058283351796020614043660246247045012696879797177214096464914163217118797997723828293838173646895218813549062085247601572319485

B = Matrix([
    [1, -N, 0, N ^ 2, 0, 0, 0, -N ^ 3],
    [0, e1, -e1, -e1*N, -e1, 0, e1*N, e1*N ^ 2],
    [0, 0, e2, -e2*N, 0, e2 * N, 0, e2 * N ^ 2],
    [0, 0, 0, e1*e2, 0, -e1*e2, -e1*e2, -e1*e2*N],
    [0, 0, 0, 0, e3, -e3*N, -e3*N, e3*N ^ 2],
    [0, 0, 0, 0, 0, e1*e3, 0, -e1*e3*N],
    [0, 0, 0, 0, 0, 0, e2*e3, -e2*e3*N],
    [0, 0, 0, 0, 0, 0, 0, e1*e2*e3],


])

x2 = 0.355
x3 = 0.4

D = Matrix([
    [int(N ^ (3/2)), 0, 0, 0, 0, 0, 0, 0],
    [0,   N, 0, 0, 0, 0, 0, 0],
    [0, 0, int(N ^ (x2+(3/2))), 0, 0, 0, 0, 0],
    [0, 0, 0, int(N ^ (1/2)), 0, 0, 0, 0],
    [0, 0, 0, 0, int(N ^ (x3+(3/2))), 0, 0, 0],
    [0, 0, 0, 0, 0, int(N ^ (x3+1)), 0, 0],
    [0, 0, 0, 0, 0, 0, int(N ^ (x3+1)), 0],
    [0, 0, 0, 0, 0, 0, 0, 1]
])
res = B*D
print(type(res))
lll = res.LLL()  # v2
y = lll[0]
inv = res.inverse()
x = y*inv

# ---------------------------------------
phi = int(e1*int(x[1]))//int(x[0])

print('phi', phi)
print('-----------------------')

bezout = xgcd(e1, phi)
d1 = Integer(mod(bezout[1], phi))
print('d1:', d1)
plain1 = pow(cipher, d1, N)
# -------------------------------------
flag = (int(plain1))
print("flag int ", flag)
print(bytes.fromhex(hex(flag)[2:]))

'''
bezout = xgcd(e2, phi)
d2 = integer(mod(bezout[1], phi))
plaiN2 = pow(cipher,d2,N)
flag = hex(int(plaiN2))[2:-1].decode('hex')
print flag
'''
