from gmpy2 import iroot, sqrt
from Crypto.Util.number import *
from icecream import *
from hashlib import sha256

n = 69804507328197961654128697510310109608046244030437362639637009184945533884294737870524186521509776189989451383438084507903660182212556466321058025788319193059894825570785105388123718921480698851551024108844782091117408753782599961943040695892323702361910107399806150571836786642746371968124465646209366215361
b = 65473938578022920848984901484624361251869406821863616908777213906525858437236185832214198627510663632409869363143982594947164139220013904654196960829350642413348771918422220404777505345053202159200378935309593802916875681436442734667249049535670986673774487031873808527230023029662915806344014429627710399196

c = 64666354938466194052720591810783769030566504653409465121173331362654665231573809234913985758725048071311571549777481776826624728742086174609897160897118750243192791021577348181130302572185911750797457793921069473730039225991755755340927506766395262125949939309337338656431876690470938261261164556850871338570

q = n
h = inverse_mod(b,n)
e = (inverse_mod(b, n)*c) % n

M = Matrix([
    [1, h],
    [0, q]
])
M = M.LLL()
f, g = M[0][0],-M[0][1]
ic(f,g)

A = (f*e)%q
B = (A*inverse_mod(f, g)) % g
m = B
print(m)
print(len(bin(m)))
FLAG = 'd3ctf{%s}' % sha256(int(m).to_bytes(50, 'big')).hexdigest()
ic(FLAG)
'''
m = 1443196433665198993523767955999914306340685280074176763368664154046190114522740462693673796369343624804755255132219524269
    607103751832889923345903055904026001399228494690341244187444772583567596158656799144620836619693630853705076970848480659911748433874329935696392602341323

ic| f: 1713445372381598798371474192888117061495093026732705918930416905660019351856535492102699621519215691485573847778780510006598563574113195652956010988026457
    g: 4401261541845145165867525601623379107498906810368800829619426493500357058790370762574139577787467171819481517303501800050622684320448155762442142852226212
'''
