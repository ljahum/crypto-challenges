from collections import namedtuple
from icecream import *
PublicKey = namedtuple('PublicKey', ['n', 'b'])
SecretKey = namedtuple('SecretKey', ['p', 'q', 'A'])



def gen_key():
    p = random_prime(2 ^ 512, lbound=2 ^ 511)
    q = random_prime(2 ^ 512, lbound=2 ^ 511)
    n = p * q
    a11, a12, a21 = [random_prime(2 ^ 100) for _ in range(3)]
    a22 = random_prime(2 ^ 100)
    while a11 * a22 == a12 * a21:
        a22 = random_prime(2 ^ 100)
    x1 = a11*a22
    ic(len(bin(x1))-2)
    x2 = a11*a22+a12+a21
    ic(len(bin(x2)))
    x3 = a11*a21
    ic(len(bin(x3)))

    A = Matrix(ZZ, [[a11, a12], [a21, a22]])

    a1 = crt([a11, a21], [p, q])
    a2 = crt([a12, a22], [p, q])
    

    b = a1 * inverse_mod(a2, n) % n

    k1 = (b*a12-a11)//p
    k2 = (b*a22-a21)//q
    ic(len(bin(k1*k2)))


    PK = PublicKey(n, b)
    SK = SecretKey(p, q, A)
    ic(len(bin(b*b))-2)
    ic(len(bin(b))-2)
    ic(len(bin(n))-2)
    return (PK, SK)


def encrypt(m, pk):
    assert 0 < m < 2 ^ 400
    r = randint(0, 2 ^ 400-1)
    # r = 834119930250993842677902067684434756612536133760732671620541010750670596692910602196001830533361085313941441279163801362

    c = (pk.b*m + r) % pk.n
    return c


def decrypt(c, sk):
    a2 = crt([sk.A[0, 1], sk.A[1, 1]], [sk.p, sk.q])
    s1 = a2 * c % sk.p
    s2 = a2 * c % sk.q
    m, r = sk.A.solve_right(vector([s1, s2]))
    return m


def test(pk, sk, num=3):
    for _ in range(num):
        m = 1443196433665198993523767955999914306340685280074176763368664154046190114522740462693673796369343624804755255132219524269
        c = encrypt(m, pk)
        mm = decrypt(c, sk)
        print(m-mm)
        assert m == mm


if __name__ == '__main__':
    from hashlib import sha256
    # from secret import m, FLAG
    # 1714354011661518376787446521047803528467275681202378837777187938092786483856751707693747738554671291824065068461117289512010846739223077366362649770310238
    m = 1443196433665198993523767955999914306340685280074176763368664154046190114522740462693673796369343624804755255132219524269

    # assert FLAG == 'd3ctf{%s}' % sha256(int(m).to_bytes(50, 'big')).hexdigest()

    PK, SK = gen_key()
    # test(PK, SK)

    # c = encrypt(m, PK)

    # print(f"PK = {PK}")
    # print(f"SK = {SK}")
    # print(f"c = {c}")


"""
PK = PublicKey(
    
n=69804507328197961654128697510310109608046244030437362639637009184945533884294737870524186521509776189989451383438084507903660182212556466321058025788319193059894825570785105388123718921480698851551024108844782091117408753782599961943040695892323702361910107399806150571836786642746371968124465646209366215361
b=65473938578022920848984901484624361251869406821863616908777213906525858437236185832214198627510663632409869363143982594947164139220013904654196960829350642413348771918422220404777505345053202159200378935309593802916875681436442734667249049535670986673774487031873808527230023029662915806344014429627710399196

c = 64666354938466194052720591810783769030566504653409465121173331362654665231573809234913985758725048071311571549777481776826624728742086174609897160897118750243192791021577348181130302572185911750797457793921069473730039225991755755340927506766395262125949939309337338656431876690470938261261164556850871338570
"""
