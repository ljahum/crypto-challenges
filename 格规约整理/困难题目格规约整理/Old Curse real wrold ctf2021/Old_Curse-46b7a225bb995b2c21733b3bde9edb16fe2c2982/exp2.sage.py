

# This file was *autogenerated* from the file exp2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_60 = Integer(60); _sage_const_32 = Integer(32); _sage_const_4 = Integer(4); _sage_const_80330528881183983072964816732300543404856810562533626369319300810697262966387144944887576330528743612839739692299784591097332512948890518183519167192046959230085412831864255497489112175176914874596237618253755256608956517757030073479666104923402013469283716999320744856718736837534911809839541660207743594867 = Integer(80330528881183983072964816732300543404856810562533626369319300810697262966387144944887576330528743612839739692299784591097332512948890518183519167192046959230085412831864255497489112175176914874596237618253755256608956517757030073479666104923402013469283716999320744856718736837534911809839541660207743594867); _sage_const_78452652317506438607956636739779994986676384637399723342738736371812868831141251164966879331214017314432739387076791674001159059604426825547538902010774841189596518785149221523738464397224366361779781148300651051284198636694801404816891957209985325619623109930150535820404950711233032177848101830061155574970 = Integer(78452652317506438607956636739779994986676384637399723342738736371812868831141251164966879331214017314432739387076791674001159059604426825547538902010774841189596518785149221523738464397224366361779781148300651051284198636694801404816891957209985325619623109930150535820404950711233032177848101830061155574970); _sage_const_0p25 = RealNumber('0.25'); _sage_const_0p15 = RealNumber('0.15'); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_0p5 = RealNumber('0.5'); _sage_const_4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419 = Integer(4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419); _sage_const_3602343035298837553927542062227 = Integer(3602343035298837553927542062227); _sage_const_3885193323999136856039629631403237736159969409639584250551518536355997978891524564035346751225719460630697433654700022473218421095180111760606245394708999 = Integer(3885193323999136856039629631403237736159969409639584250551518536355997978891524564035346751225719460630697433654700022473218421095180111760606245394708999); _sage_const_944838399254930087523310357339939742097556483183482662977225295067404254966876247970295271959280809100126064366722912020666848894003017117276240476372364 = Integer(944838399254930087523310357339939742097556483183482662977225295067404254966876247970295271959280809100126064366722912020666848894003017117276240476372364); _sage_const_5316297494616251967087180573684467112077977207314228196651011473838683480275875989908990738740861375687186766156200219641981169308660139151062711296717379891376294785675104640775506724244803337279235747630215478504380272738204733311972022712834357078381541224632797503360732934454187646031643331529389570159 = Integer(5316297494616251967087180573684467112077977207314228196651011473838683480275875989908990738740861375687186766156200219641981169308660139151062711296717379891376294785675104640775506724244803337279235747630215478504380272738204733311972022712834357078381541224632797503360732934454187646031643331529389570159); _sage_const_73177062713968648963738410812785853174528721431172461113561340178691492280271903912043554814810920745154304747328073913103230849027745226637330284520633847773874342467137552022725301429074046921710660867115557994943332628756632246059800601063580017261698262663178072317324978782579376388601713100806653808812 = Integer(73177062713968648963738410812785853174528721431172461113561340178691492280271903912043554814810920745154304747328073913103230849027745226637330284520633847773874342467137552022725301429074046921710660867115557994943332628756632246059800601063580017261698262663178072317324978782579376388601713100806653808812); _sage_const_11 = Integer(11); _sage_const_13 = Integer(13); _sage_const_131 = Integer(131); _sage_const_227 = Integer(227); _sage_const_251 = Integer(251); _sage_const_831396757 = Integer(831396757); _sage_const_1108897087 = Integer(1108897087); _sage_const_2178767881 = Integer(2178767881); _sage_const_2253769513 = Integer(2253769513); _sage_const_2698180579 = Integer(2698180579); _sage_const_3504974177 = Integer(3504974177); _sage_const_3752390129 = Integer(3752390129); _sage_const_3787135097 = Integer(3787135097); _sage_const_4166580373 = Integer(4166580373); _sage_const_4192312919 = Integer(4192312919); _sage_const_505386797752007 = Integer(505386797752007); _sage_const_15743834086867007131 = Integer(15743834086867007131); _sage_const_14842292277078537617 = Integer(14842292277078537617); _sage_const_15114820929537893567 = Integer(15114820929537893567); _sage_const_120659691081137900860528439558149439256036479214584879088476613192185895986414329679519081477454257879221194033908435726005914629 = Integer(120659691081137900860528439558149439256036479214584879088476613192185895986414329679519081477454257879221194033908435726005914629); _sage_const_12 = Integer(12); _sage_const_510 = Integer(510); _sage_const_513 = Integer(513); _sage_const_264 = Integer(264); _sage_const_8 = Integer(8); _sage_const_512 = Integer(512); _sage_const_0xb8 = Integer(0xb8); _sage_const_0x86 = Integer(0x86); _sage_const_5 = Integer(5); _sage_const_0p45 = RealNumber('0.45'); _sage_const_0p007 = RealNumber('0.007')
from itertools import *
import math
from tqdm import *
from icecream import *

from Crypto.Util.number import *


def matrix_overview(BB):
    print("matrix_overview")
    for ii in range(BB.dimensions()[_sage_const_0 ]):
        a = ('%02d ' % ii)
        for jj in range(BB.dimensions()[_sage_const_1 ]):
            if BB[ii,jj] == _sage_const_0 :
                a += ' '
            else:
                a += 'X'
            if BB.dimensions()[_sage_const_0 ] < _sage_const_60 :
                a += ' '
        print(a)


def lattice_attack(pol, e, X, Y, Z, mm, tt):
    polys = []

    for kk in range(mm + _sage_const_1 ):
        for i1 in range(kk, mm + _sage_const_1 ):
            i3 = mm - i1
            poly = x ** (i1 - kk) * z ** i3 * pol ** kk * e ** (mm - kk)
            polys.append(poly)

    # H
    for kk in range(mm + _sage_const_1 ):
        i1 = kk
        for i2 in range(kk + _sage_const_1 , i1 + tt + _sage_const_1 ):
            i3 = mm - i1
            poly = y ** (i2 - kk) * z ** i3 * pol ** kk * e ** (mm - kk)
            polys.append(poly)
    polys.sort()
    
    print(polys)
    # 把 polys 所有式子去掉系数存在一起
    monomials = []
    for poly in polys:
        monomials += poly.monomials()
    print(monomials)
    # 去重 排序
    monomials = sorted(set(monomials))
    print('=============================')
    print(monomials)
    input()
    dims1 = len(polys)
    dims2 = len(monomials)
    M = matrix(QQ, dims1, dims2)

    # for ii in range(dims1):
    #     for jj in range(dims2):
    #         if monomials[jj] in polys[ii].monomials():
    #             M[ii, jj] = polys[ii](x * X, y * Y, z * Z).monomial_coefficient(monomials[jj])

                
    for ii in range(dims1):

        # print(polys[ii])
        # print(polys[ii].monomials())
        
        for jj in range(dims2):
            if monomials[jj] in polys[ii].monomials():
                ic(ii,jj)
                # ic(monomials[jj] , polys[ii].monomials())
                M[ii, jj] = polys[ii](x * X, y * Y, z * Z).monomial_coefficient(monomials[jj])
            

                
    matrix_overview(M)
    print('-' * _sage_const_32 )

    print('bound check:', abs(M.det()) < e ** (dims1 * mm))
    print(int(M.det()).bit_length(), int(e ** (dims1 * mm)).bit_length())

    BB = M.LLL()
    # print(BB)
    print('LLL done')
    input()
    print('-' * _sage_const_32 )
    matrix_overview(BB)
    print('-' * _sage_const_32 )
    
    H = [(i, _sage_const_0 ) for i in range(dims1)]
    H = dict(H)

    for j in range(dims2):
        for i in range(dims1):
            H[i] += PR((monomials[j] * BB[i, j]) // monomials[j](X, Y, Z))

    H = list(H.values())
    PQ = PolynomialRing(ZZ, 'xq, yq, zq')
    for i in range(dims1):
        H[i] = PQ(H[i])

    xv, yv, zv = var("xq,yq,zq")
    print(solve([h_i(xv, yv, zv) for h_i in H[_sage_const_1 :_sage_const_4 ]], xv, yv, zv))
    print('-' * _sage_const_32 )


N = _sage_const_80330528881183983072964816732300543404856810562533626369319300810697262966387144944887576330528743612839739692299784591097332512948890518183519167192046959230085412831864255497489112175176914874596237618253755256608956517757030073479666104923402013469283716999320744856718736837534911809839541660207743594867 
e = _sage_const_78452652317506438607956636739779994986676384637399723342738736371812868831141251164966879331214017314432739387076791674001159059604426825547538902010774841189596518785149221523738464397224366361779781148300651051284198636694801404816891957209985325619623109930150535820404950711233032177848101830061155574970 

PR = PolynomialRing(ZZ, 'x, y, z')
x, y, z = PR.gens()

alpha = _sage_const_0p25 
gamma = _sage_const_0p15 
delta = _sage_const_0p15 
beta = math.log2(e) / math.log2(N)

X = floor(_sage_const_4  * N ** (beta + delta - _sage_const_1 )) 
Y = floor(_sage_const_3  * sqrt(_sage_const_2 ) * N ** (_sage_const_0p5  + alpha))
Z = floor(N ** gamma)

# Target polynomial
pol = x * y - N * x + z
mm = _sage_const_3 
tt = _sage_const_1 

lattice_attack(pol, e, X, Y, Z, mm, tt)

'''
[
[xq == r1, yq == r2, zq == -r1*r2 + 4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419/3602343035298837553927542062227*r1],
[xq == 0, yq == r3, zq == 0],
[xq == r4, yq == (4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419/3602343035298837553927542062227), zq == 0]
]
'''

y = _sage_const_4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419 //_sage_const_3602343035298837553927542062227  + _sage_const_1 
x, z = var('x, z', domain=ZZ)

k1 = _sage_const_3602343035298837553927542062227 
k2 = _sage_const_4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419 

res = solve([z * k1 == -k1*x*y + k2*x], x, z)
print(res)
print('-' * _sage_const_32 )

x = Integer(res[_sage_const_0 ].coefficients()[_sage_const_0 ][_sage_const_0 ])
z = Integer(res[_sage_const_1 ].coefficients()[_sage_const_0 ][_sage_const_0 ])

assert (x * y - N * x + z) % e == _sage_const_0 
u = (x * y - N * x + z) // e
v = x
w = -z

p_s_q_r = N - y
print('(p-s)(q-r) =', p_s_q_r)
print('-' * _sage_const_32 )

a = _sage_const_3885193323999136856039629631403237736159969409639584250551518536355997978891524564035346751225719460630697433654700022473218421095180111760606245394708999 
b = _sage_const_944838399254930087523310357339939742097556483183482662977225295067404254966876247970295271959280809100126064366722912020666848894003017117276240476372364 
E = EllipticCurve(Zmod(N), [a, b])
stone = E(_sage_const_5316297494616251967087180573684467112077977207314228196651011473838683480275875989908990738740861375687186766156200219641981169308660139151062711296717379891376294785675104640775506724244803337279235747630215478504380272738204733311972022712834357078381541224632797503360732934454187646031643331529389570159 , _sage_const_73177062713968648963738410812785853174528721431172461113561340178691492280271903912043554814810920745154304747328073913103230849027745226637330284520633847773874342467137552022725301429074046921710660867115557994943332628756632246059800601063580017261698262663178072317324978782579376388601713100806653808812 )

d = inverse_mod(e, p_s_q_r)
heart = d * stone

factors_list = [
    _sage_const_11 ,
    _sage_const_13 ,
    _sage_const_131 ,
    _sage_const_131 ,
    _sage_const_227 ,
    _sage_const_251 ,
    _sage_const_251 ,
    _sage_const_831396757 ,
    _sage_const_1108897087 ,
    _sage_const_2178767881 ,
    _sage_const_2253769513 ,
    _sage_const_2698180579 ,
    _sage_const_3504974177 ,
    _sage_const_3752390129 ,
    _sage_const_3787135097 ,
    _sage_const_4166580373 ,
    _sage_const_4192312919 ,
    _sage_const_505386797752007 ,
    _sage_const_15743834086867007131 ,
    _sage_const_14842292277078537617 ,
    _sage_const_15114820929537893567 
 ]

base = _sage_const_120659691081137900860528439558149439256036479214584879088476613192185895986414329679519081477454257879221194033908435726005914629 
assert is_prime(base) == _sage_const_1 
assert base * prod(factors_list) == p_s_q_r
cipher = int(heart[_sage_const_0 ])

P = PolynomialRing(Zmod(N), names=('x',)); (x,) = P._first_ngens(1)
for num in tqdm(range(_sage_const_2 , _sage_const_12 )):
    candidate = list(combinations(factors_list, num))
    for tmp_factors in candidate:
        tmp_pro = prod(tmp_factors) * base
        if _sage_const_510  < int(tmp_pro).bit_length() < _sage_const_513 :
            for padding_bits in range(_sage_const_0 , _sage_const_264 , _sage_const_8 ):
                p_r = p_s_q_r//tmp_pro
                if b'rwctf' not in long_to_bytes(p_r ^ (cipher>>padding_bits)):
                    continue
                else:
                    print('Found the p-r:', p_r)
                    print('-' * _sage_const_32 )
                    print('part flag:', long_to_bytes(p_r ^ (cipher>>padding_bits)))
                    k = _sage_const_512  - len('rwctf{tH3_CursE_h4S_bR0KEn_o1GIe') * _sage_const_8 

                    print('random padding bits:', k)
                    print('-' * _sage_const_32 )
                    for guess in tqdm([ord('R'), ord('r'), ord('3')]):
                        p_high = ((p_r >> k) << k) + ((guess ^ _sage_const_0xb8  ^ _sage_const_0x86 )<<(k-_sage_const_8 ))
                        f = p_high + x
                        res = f.monic().small_roots(X=_sage_const_2  ** (k-_sage_const_5 ), beta=_sage_const_0p45 , epsilon=_sage_const_0p007 )
                        if len(res) > _sage_const_0 :
                            print('found the result:', res)
                            p = p_high + int(res[_sage_const_0 ])
                            q = N // p
                            assert N == p * q
                            print(long_to_bytes((cipher >> padding_bits) ^ p))
                            input()

