

# This file was *autogenerated* from the file exp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_60 = Integer(60); _sage_const_2 = Integer(2); _sage_const_128 = Integer(128); _sage_const_4 = Integer(4); _sage_const_3602343035298837553927542062227 = Integer(3602343035298837553927542062227); _sage_const_4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419 = Integer(4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419); _sage_const_80330528881183983072964816732300543404856810562533626369319300810697262966387144944887576330528743612839739692299784591097332512948890518183519167192046959230085412831864255497489112175176914874596237618253755256608956517757030073479666104923402013469283716999320744856718736837534911809839541660207743594867 = Integer(80330528881183983072964816732300543404856810562533626369319300810697262966387144944887576330528743612839739692299784591097332512948890518183519167192046959230085412831864255497489112175176914874596237618253755256608956517757030073479666104923402013469283716999320744856718736837534911809839541660207743594867); _sage_const_78452652317506438607956636739779994986676384637399723342738736371812868831141251164966879331214017314432739387076791674001159059604426825547538902010774841189596518785149221523738464397224366361779781148300651051284198636694801404816891957209985325619623109930150535820404950711233032177848101830061155574970 = Integer(78452652317506438607956636739779994986676384637399723342738736371812868831141251164966879331214017314432739387076791674001159059604426825547538902010774841189596518785149221523738464397224366361779781148300651051284198636694801404816891957209985325619623109930150535820404950711233032177848101830061155574970); _sage_const_7p0 = RealNumber('7.0'); _sage_const_6 = Integer(6); _sage_const_1p0 = RealNumber('1.0'); _sage_const_3 = Integer(3); _sage_const_0p25 = RealNumber('0.25'); _sage_const_0p15 = RealNumber('0.15'); _sage_const_0p5 = RealNumber('0.5')# display matrix picture with 0 and X
# references: https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage
def matrix_overview(BB):
    for ii in range(BB.dimensions()[_sage_const_0 ]):
        a = ('%02d ' % ii)
        for jj in range(BB.dimensions()[_sage_const_1 ]):
            if BB[ii,jj] == _sage_const_0 :
                a += ' '
            else:
                a += 'X'
            if BB.dimensions()[_sage_const_0 ] < _sage_const_60 :
                a += ' '
        print(a)
    
def lattice_attack(pol, e, X, Y, Z, mm = _sage_const_2 , tt = _sage_const_1 ):
        
    polys = []
    
    for kk in range(mm+_sage_const_1 ):
        for i1 in range(kk, mm+_sage_const_1 ):
            i2 = kk
            i3 = mm - i1
            poly = x**(i1 - kk) * z**i3 * pol ** kk * e ** (mm - kk)
            polys.append(poly)

    for kk in range(mm+_sage_const_1 ):
        i1 = kk
        for i2 in range(kk + _sage_const_1 , i1 + tt + _sage_const_1 ):
            i3 = mm - i1
            poly = y**(i2 - kk) * z**i3 * pol ** kk * e ** (mm - kk)
            polys.append(poly)

    polys = sorted(polys)
    monomials = []
    for poly in polys:
        monomials += poly.monomials()
    monomials = sorted(set(monomials))
    dims1 = len(polys)
    dims2 = len(monomials)
    M = matrix(QQ, dims1, dims2)

    for ii in range(dims1):
        M[ii, _sage_const_0 ] = polys[ii](_sage_const_0 , _sage_const_0 , _sage_const_0 )
        for jj in range(dims2):
            if monomials[jj] in polys[ii].monomials():
                M[ii, jj] = polys[ii](x * X, y * Y, z * Z).monomial_coefficient(monomials[jj])
                
    matrix_overview(M)
    print()
    print('=' * _sage_const_128 )
    print()
    B = M.LLL()
    print('LLL done')
    matrix_overview(B)
    H = [(i, _sage_const_0 ) for i in range(dims1)]
    H = dict(H)
    for j in range(dims2):
        for i in range(dims1):
            H[i] += PR((monomials[j] * B[i, j]) // monomials[j](X, Y, Z))

    H = list(H.values())
    PQ = PolynomialRing(QQ, 'xq, yq, zq')
    xq, yq, zq = PQ.gens()
    for i in range(dims1):
        H[i] = PQ(H[i])

    I = Ideal(*H[_sage_const_1 :_sage_const_4 ])
    xv,yv,zv = var("xq,yq,zq")
    input()
    g = I.groebner_basis('giac')[::-_sage_const_1 ]
    input()
    print(solve([g_i(xv,yv,zv) for g_i in g],xv,yv,zv))
    '''
    [xq == r84, yq == r85, zq == r84*r85 - 4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419/3602343035298837553927542062227*r84],
    [xq == r86, yq == (4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419/3602343035298837553927542062227), zq == 0],
    [xq == 0, yq == r87, zq == 0],
    we get xq = 3602343035298837553927542062227
        yq = 4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419//3602343035298837553927542062227 + 1
        zq = xq*yq - 4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419
        assert (xq*yq - N*xq - zq) % e == 0
    '''
    xq = _sage_const_3602343035298837553927542062227 
    yq = _sage_const_4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419 //_sage_const_3602343035298837553927542062227  + _sage_const_1 
    zq = xq*yq - _sage_const_4298479533919222051278424008577823787364263332580438512213525069157290784423146604914451469507153913893839652272765256923591944212821123404914813182473920184304071161320177981959839398079746158378586359732136948418875022137978872858278664265291581144582621441419 
    assert (xq*yq - N*xq - zq) % e == _sage_const_0 
    return xq,yq,zq


N = _sage_const_80330528881183983072964816732300543404856810562533626369319300810697262966387144944887576330528743612839739692299784591097332512948890518183519167192046959230085412831864255497489112175176914874596237618253755256608956517757030073479666104923402013469283716999320744856718736837534911809839541660207743594867 
e = _sage_const_78452652317506438607956636739779994986676384637399723342738736371812868831141251164966879331214017314432739387076791674001159059604426825547538902010774841189596518785149221523738464397224366361779781148300651051284198636694801404816891957209985325619623109930150535820404950711233032177848101830061155574970 

import math

def bound_check(alpha, beta, gamma, delta):
    cond = _sage_const_7p0 /_sage_const_6  + _sage_const_1p0 /_sage_const_3 *alpha - gamma - _sage_const_1p0 /_sage_const_3  * float(sqrt((_sage_const_2 *alpha + _sage_const_1 )*(_sage_const_2 *alpha + _sage_const_6 *beta - _sage_const_6 *gamma +_sage_const_1 ))) > delta
    return cond

PR = PolynomialRing(ZZ, 'x, y, z')
x, y, z = PR.gens()

alpha = _sage_const_0p25 
gamma = _sage_const_0p15 
delta = _sage_const_0p15 
beta = math.log2(e) / math.log2(N)

X = math.floor(_sage_const_4 *N**(beta + delta - _sage_const_1 ))
Y = math.floor(_sage_const_3 *sqrt(_sage_const_2 )*N**(_sage_const_0p5  + alpha))
Z = math.floor(N**gamma)

# Target polynomial
pol = x*y - N*x - z

mm = _sage_const_3 
t0 = (_sage_const_1   -  _sage_const_2 *alpha - _sage_const_2 *delta -  _sage_const_2 *gamma) / (_sage_const_2 *(_sage_const_1  + _sage_const_2 *alpha))
tt = _sage_const_1 
print(f" bound check : {bound_check(alpha, beta, gamma, delta)} if failed, does not matter")
x0, y0, z0 = lattice_attack(pol, e, X, Y, Z, mm, tt)

