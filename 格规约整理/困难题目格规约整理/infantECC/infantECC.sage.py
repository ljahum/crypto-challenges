

# This file was *autogenerated* from the file infantECC.sage
from sage.all_cmdline import *   # import sage library

_sage_const_512 = Integer(512); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_100 = Integer(100); _sage_const_256 = Integer(256)
from Crypto.Util.number import getStrongPrime, bytes_to_long, long_to_bytes
from hashlib import sha256

flag = b'flag{Copper5mith_M3thod_f0r_ECC}'

p=getStrongPrime(_sage_const_512 )
q=getStrongPrime(_sage_const_512 )
R=Zmod(p*q)

Mx=R.random_element()
My=R.random_element()
b=My**_sage_const_2 -Mx**_sage_const_3 
E=EllipticCurve(R, [_sage_const_0 ,b])
Ep=EllipticCurve(GF(p), [_sage_const_0 ,b])
Eq=EllipticCurve(GF(q), [_sage_const_0 ,b])
Ecard=Ep.cardinality()*Eq.cardinality()
r=random_prime((p^q)>>_sage_const_100 )
s=inverse_mod(r, Ecard)

print((s,b))
print(s*E(Mx,My))
print(randint(_sage_const_0 ,Ecard)*E(Mx,My))
print(r^(bytes_to_long(sha256(long_to_bytes(Mx)).digest())^bytes_to_long(flag))<<_sage_const_256 )

