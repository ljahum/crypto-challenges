from tqdm import tqdm
Q = (31981799071949968743482831587417174146463993877255771340814476669214408840460,15144025062588325012239455117890516531350002058200271280110877844265896081387)
p = 64464091191308356774703439660771627086045800299627641179047457478059588557461
a = 31926335967105564755113987930261069322507794703287741857397622356704769886356
b = 34835808070187351680507689900273321615070127680320357724483770400791707112940
Gx = 2053202552422630348010474635096983783565667661786369125783579647572276572403
Gy = 51320753844844801021362329076409450910659564359017581255542897537756778371539

Zp = Zmod(p)
EC = EllipticCurve(Zp, [a, b])
P = EC(Gx, Gy)
Q = EC.point(Q)
print(factor(EC.order()))
# assert k < 32000000000000000000000000000
# 11000838085296873931177
# 32000000000000000000000000000
from Crypto.Util.number import *

pri = [4,3,1246057,2357351,435374689,4200599533614753251608117237235588759908311280924414151]

# dlogs = []
# for fac in pri:
#     t = int(P.order()) // int(fac)
#     dlog = discrete_log(t*Q,t*P,operation="+")
#     dlogs += [dlog]
#     print("factor: "+str(fac)+", Discrete Log: "+str(dlog)) #calculates discrete logarithm for each prime order
#     print(dlogs)
    
log = [1, 1, 1016839, 813641, 35993350]
pri = [4,3,1246057,2357351,435374689]

print(crt(log,pri))
mod = 15346402501700727093876
x = 11000838085296873931177

S = x*P
t = (x+15346402501700727093876*2064666)*P
print(t)
print(Q)
m = x+15346402501700727093876*2064666
print(long_to_bytes(m))
# b'factor_ordeq'
# for i in tqdm(range(2085178)):
#     S = S+t
#     if(S==Q):
#         print(i)

# 2064666