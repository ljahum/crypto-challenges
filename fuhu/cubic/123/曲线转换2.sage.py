

# This file was *autogenerated* from the file 曲线转换2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_12 = Integer(12); _sage_const_3 = Integer(3); _sage_const_32 = Integer(32); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_8 = Integer(8); _sage_const_100 = Integer(100)
n = _sage_const_4 
a = (_sage_const_4 *n ** _sage_const_2 +_sage_const_12 *n-_sage_const_3 )
b = _sage_const_32 *(n+_sage_const_3 )
ee = EllipticCurve([_sage_const_0 , a, _sage_const_0 , b, _sage_const_0 ])
# y2=x3+109x2+224x


def orig(P, N):
    x = P[_sage_const_0 ]
    y = P[_sage_const_1 ]
    a = (_sage_const_8 *(N+_sage_const_3 )-x+y)/(_sage_const_2 *(N+_sage_const_3 )*(_sage_const_4 -x))
    b = (_sage_const_8 *(N+_sage_const_3 )-x-y)/(_sage_const_2 *(N+_sage_const_3 )*(_sage_const_4 -x))
    c = (-_sage_const_4 *(N+_sage_const_3 )-(N+_sage_const_2 )*x)/((N+_sage_const_3 )*(_sage_const_4 -x))
    da = denominator(a)
    db = denominator(b)
    dc = denominator(c)
    l = lcm(da, lcm(db, dc))
    return [a*l, b*l, c*l]


g = ee.gens()
# print(g[0][0])
# [(-200 : 680 : 1)]
P = ee(g[_sage_const_0 ][_sage_const_0 ], g[_sage_const_0 ][_sage_const_1 ])
# P = ee(g)
# print(P)
for i in range(_sage_const_1 ,_sage_const_100 ):
    x,y,z = orig(i*P, n)
    if(x>_sage_const_0  and y>_sage_const_0  and z>_sage_const_0 ):
        print(f'x={x}\ny={y}\nz={z}\n')
        print((x/(y+z))+(z/(x+y))+(y/(x+z)))
        print(f'i = {i}')
        break
    
    
        




