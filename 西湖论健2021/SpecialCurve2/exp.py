from Crypto.Util.number import long_to_bytes
import gmpy2


def add(P1,P2):
    x1,y1=P1
    x2,y2=P2
    x3=(x1*x2-y1*y2)%n
    y3=(x1*y2+x2*y1)%n
    return (x3,y3)

def mul(P,k):
    assert k>=0
    Q=(1,0)
    while k>0:
        if k%2:
            k-=1
            Q=add(P,Q)
        else:
            k//=2
            P=add(P,P)
    return Q
n=92916331959725072239888159454032910975918656644816711315436128106147081837990823
HINT=(1225348982571480649501200428324593233958863708041772597837722864848672736148168, 1225348982571480649501200428324593233958863708041772597837722864848672736148168)
C=(44449540438169324776115009805536158060439126505148790545560105884100348391877176, 73284708680726118305136396988078557189299357177640330968917927635171441710392723)


from Crypto.Util.number import long_to_bytes
import gmpy2

e = 96564183954285580248216944343172776827819893296479821021220123492652817873253
# n = 425886199617876462796191899<27> · 434321947632744071481092243<27> · 502327221194518528553936039<27>

p = [425886199617876462796191899, 434321947632744071481092243, 502327221194518528553936039] 

phi = (p[0]**2-1)*(p[1]**2-1)*(p[2]**2-1) 
d = gmpy2.invert(e, phi) 

M = mul(C,d) 
print(mul(M,e)==C)
# assert mul(G,e)==HINT

print(long_to_bytes(M[0])+long_to_bytes(M[1]))