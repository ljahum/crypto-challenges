

# This file was *autogenerated* from the file /mnt/c/Users/16953/Desktop/mmxctf/赛题归档/crypto-challenges/蓝猫2021/final/crack_point/exp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_199577891335523667447918233627928226021 = Integer(199577891335523667447918233627928226021); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_6745936378050226004298256621352165803 = Integer(6745936378050226004298256621352165803); _sage_const_27906538695990793423441372910027591553 = Integer(27906538695990793423441372910027591553); _sage_const_26333907222366222187416360421790100900 = Integer(26333907222366222187416360421790100900); _sage_const_15685215723385060577747689361308893836 = Integer(15685215723385060577747689361308893836); _sage_const_53570576204982581657469369029969950113 = Integer(53570576204982581657469369029969950113); _sage_const_25369349510945575560344119361348972982 = Integer(25369349510945575560344119361348972982); _sage_const_154197284061586737858758103708592634427 = Integer(154197284061586737858758103708592634427); _sage_const_79569265701802598850923391009373339175 = Integer(79569265701802598850923391009373339175); _sage_const_436370150383 = Integer(436370150383)#! /usr/bin/sage
from sage.all import *
from sage.groups.generic import bsgs
from Crypto.Util.number import *

p = _sage_const_199577891335523667447918233627928226021 
E = EllipticCurve(GF(p), [_sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_6745936378050226004298256621352165803 , _sage_const_27906538695990793423441372910027591553 ])
G = E.gen(_sage_const_0 )
P1 = (_sage_const_26333907222366222187416360421790100900  , _sage_const_15685215723385060577747689361308893836  )
P2 = (_sage_const_53570576204982581657469369029969950113  , _sage_const_25369349510945575560344119361348972982 )
cipher = (_sage_const_154197284061586737858758103708592634427  , _sage_const_79569265701802598850923391009373339175 )
P2 = E(P2)
P1 = E(P1)
# key = bsgs(G,P2,(0,2^40),operation='+')
# print(key)
key = _sage_const_436370150383 
cipher = E(cipher)
key1= key*P1
flag = cipher - key1
print(flag.xy()) 

