

# This file was *autogenerated* from the file task.sage
from sage.all_cmdline import *   # import sage library

_sage_const_512 = Integer(512); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_8 = Integer(8); _sage_const_16 = Integer(16)
from Crypto.Util.number import *
from hashlib import sha256
from os import urandom
from Crypto.Util.number import bytes_to_long as b2l
# from secret import p, a, b, flag
p=getPrime(_sage_const_512 )
flag=b'flag{??????????????}'
a=randint(_sage_const_1 ,p-_sage_const_1 )
b=randint(_sage_const_1 ,p-_sage_const_1 )
ECC = EllipticCurve(GF(p), [a, b])
R, E, C = [ECC.random_point() for _ in range(_sage_const_3 )]
M=Matrix(ZZ,len(flag),_sage_const_3 )
pad = lambda m: urandom(_sage_const_8 ) + m + b'\x00' * (ZZ(p).nbits() // _sage_const_8  - len(m) - _sage_const_8  - _sage_const_1 )
out = list()
for i in range(len(flag)):
    m = pad(chr(flag[i]).encode())
    nonce = urandom(_sage_const_16 )
    sh = sha256(nonce + m).digest()
    Q = b2l(m)*R + b2l(nonce)*E + b2l(sh)*C
    out.append(Q)

with open('out.tuo', 'w') as f:
    f.write(str(out))

