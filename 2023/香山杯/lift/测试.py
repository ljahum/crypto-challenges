import os
import gmpy2
from Crypto.Util.number import *
import random
# from secrets import flag
def pad(s,l):
    return s + os.urandom(l - len(s))
def gen():
    g = getPrime(8)
    while True:
        p = g * random.getrandbits(138) + 1
        if isPrime(p):
            break
    while True:
        q = g * random.getrandbits(138) + 1
        if isPrime(q):
            break
    N = p ** 5 * q
    phi = p ** 4 * (p - 1) * (q - 1)
    # d = random.getrandbits(256)
    d = getPrime(256)
    l1 = len(bin(d))-2
    l2 = len(bin(N))-2
    print(int(N**(0.296))-d)
    # print(len(bin(d))-2)
    # print(len(bin(N))-2)
    print(l1,l2)
    print(l1/l2)    
    
    
    e = inverse(d, phi)
    E = e * g
    hint = gmpy2.gcd(E, phi)
    return N, E, hint

# flag = pad(flag,64)
# m = bytes_to_long(flag)
n,e,hint = gen()
# c = pow(m,e,n)
# print(f'hint = {hint}')
# print(f'n = {n}')
# print(f'e = {e}')
# print(f'c = {c}')
# hint = 251
# n = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077
# e = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039
# c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162
