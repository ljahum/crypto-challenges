

# This file was *autogenerated* from the file xsb.sage
from sage.all_cmdline import *   # import sage library

_sage_const_6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849 = Integer(6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849); _sage_const_641747 = Integer(641747); _sage_const_730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943 = Integer(730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_5 = Integer(5); _sage_const_91027438112295439314606669837102361953591324472804851543344131406676387779969 = Integer(91027438112295439314606669837102361953591324472804851543344131406676387779969)
from Crypto.Util.number import *
import itertools




# hint = 251
# n = 108960799213330048807537253155955524262938083957673388027650083719597357215238547761557943499634403020900601643719960988288543702833581456488410418793239589934165142850195998163833962875355916819854378922306890883033496525502067124670576471251882548376530637034077
# e = 3359917755894163258174451768521610910491402727660720673898848239095553816126131162471035843306464197912997253011899806560624938869918893182751614520610693643690087988363775343761651198776860913310798127832036941524620284804884136983215497742441302140070096928109039
# c = 72201537621260682675988549650349973570539366370497258107694937619698999052787116039080427209958662949131892284799148484018421298241124372816425123784602508705232247879799611203283114123802597553853842227351228626180079209388772101105198454904371772564490263034162
# e //= hint
# RP.<x> = PolynomialRing(Zmod(n))
# f = e*x -1
# f = f.monic()
# x0 = f.small_roots(X = 2^256,beta = 0.4)
# print(x0)

# x0 = 39217838246811431279243531729119914044224429322696785472959081158748864949269

# p4 = GCD(x0*e-1,n)
# # 23153425300889483483553551112335873301449089474555179592930187730428387181422112282990079197590872977617830286073037301064978277511828551780538222539198674709759058026997715121

# # print(gmpy2.iroot(int(p4),int(4)))
# # (mpz(69367143733862710652791985332025152581988181), True)
# p = 69367143733862710652791985332025152581988181
# q = n // p ^ 5

# phi = p ^ 4 * (p - 1) * (q - 1)
# d=  inverse(e,phi)
# # 39217838246811431279243531729119914044224429322696785472959081158748864949269


# cp = c % p^5
# cq = c % q

# e = e*hint
n = _sage_const_6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849 
e = _sage_const_641747 
c = _sage_const_730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943 

def decrypt2(p,c,e):
    phip = p ** _sage_const_4  * (p - _sage_const_1 ) 
    
    w = GCD(e,phip)
    p1 = phip // w
    b = inverse(e,p1)
    
    g = get_oneroot2(p,w)    
    m = pow(c,b,p**_sage_const_5 )
    mps = [ZZ(m*g**i) for i in range(w)]
    return mps

def get_oneroot2(p,w):
    while _sage_const_1 :
        Zp = Zmod(p**_sage_const_5 )
        g = Zp.random_element()
        g = g**(p**_sage_const_4 *(p-_sage_const_1 )//w)
        for i in divisors(w):
            if(i != w):
                g2 = g**i
                if(g2 ==_sage_const_1 ):
                    break
        else:
            # break
            return g
p = _sage_const_91027438112295439314606669837102361953591324472804851543344131406676387779969 

cp = c % p**_sage_const_5 
mps = decrypt2(p,cp,e)
print(len(mps))
for i in mps:
    flag = long_to_bytes(i)
    # print(len(flag))
    if b'flag' in flag:
        print(flag)




