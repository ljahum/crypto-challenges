from Crypto.Util.number import *
import itertools



# e = e*hint
n = 6249734963373034215610144758924910630356277447014258270888329547267471837899275103421406467763122499270790512099702898939814547982931674247240623063334781529511973585977522269522704997379194673181703247780179146749499072297334876619475914747479522310651303344623434565831770309615574478274456549054332451773452773119453059618433160299319070430295124113199473337940505806777950838270849
e = 641747
c = 730024611795626517480532940587152891926416120514706825368440230330259913837764632826884065065554839415540061752397144140563698277864414584568812699048873820551131185796851863064509294123861487954267708318027370912496252338232193619491860340395824180108335802813022066531232025997349683725357024257420090981323217296019482516072036780365510855555146547481407283231721904830868033930943

def decrypt2(p,c,e):
    phip = p ^ 4 * (p - 1) 
    
    w = GCD(e,phip)
    p1 = phip // w
    b = inverse(e,p1)
    
    g = get_oneroot2(p,w)    
    m = pow(c,b,p^5)
    mps = [ZZ(m*g^i) for i in range(w)]
    return mps

def get_oneroot2(p,w):
    while 1:
        Zp = Zmod(p^5)
        g = Zp.random_element()
        g = g^(p^4*(p-1)//w)
        for i in divisors(w):
            if(i != w):
                g2 = g^i
                if(g2 ==1):
                    break
        else:
            # break
            return g
p = 91027438112295439314606669837102361953591324472804851543344131406676387779969

cp = c % p^5
mps = decrypt2(p,cp,e)
print(len(mps))
for i in mps:
    flag = long_to_bytes(i)
    # print(len(flag))
    if b'flag' in flag:
        print(flag)



