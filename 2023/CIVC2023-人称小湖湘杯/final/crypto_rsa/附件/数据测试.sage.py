

# This file was *autogenerated* from the file 数据测试.sage
from sage.all_cmdline import *   # import sage library

_sage_const_9749890956047634025843722085913489514303779014728325040183618129757365489493736760025348876398449354634709917761510243415367674564756937798954284705851103 = Integer(9749890956047634025843722085913489514303779014728325040183618129757365489493736760025348876398449354634709917761510243415367674564756937798954284705851103); _sage_const_9300227946445908974722142315037485678650384621655235949404780551589505334983061098626829789458685630321916038007065589274755938247045369821786774129200840988368193853423546816402426075817 = Integer(9300227946445908974722142315037485678650384621655235949404780551589505334983061098626829789458685630321916038007065589274755938247045369821786774129200840988368193853423546816402426075817); _sage_const_1 = Integer(1); _sage_const_350 = Integer(350); _sage_const_1866819942542109649444919897502751084325360697629662770551009244327299457710198359330676093935848338171615 = Integer(1866819942542109649444919897502751084325360697629662770551009244327299457710198359330676093935848338171615); _sage_const_2 = Integer(2); _sage_const_200 = Integer(200); _sage_const_0p2 = RealNumber('0.2')
from Crypto.Util.number import *
# p1 = getPrime(512)
# q1 = getPrime(512)
# print(p1,q1)
p1 = _sage_const_9749890956047634025843722085913489514303779014728325040183618129757365489493736760025348876398449354634709917761510243415367674564756937798954284705851103 

# q1 = 12546807214024188679287391547653936055193665989507188368654250927172595199367534965386728279940523736986749014657322637014616920690291616014611913426507639


n1 = _sage_const_9300227946445908974722142315037485678650384621655235949404780551589505334983061098626829789458685630321916038007065589274755938247045369821786774129200840988368193853423546816402426075817 
# print(n1)

# leak2 = (p1 & ((1 << 350) - 1)) >> 5
leak2 = (p1 & ((_sage_const_1  << _sage_const_350 ) - _sage_const_1 ))
print(leak2)
p_low = _sage_const_1866819942542109649444919897502751084325360697629662770551009244327299457710198359330676093935848338171615 

R = PolynomialRing(Zmod(n), names=('x',)); (x,) = R._first_ngens(1)
f = p_low + x<<_sage_const_350 
tmp = f.small_roots(_sage_const_2 **_sage_const_200 ,_sage_const_0p2 )
print(tmp)



