

# This file was *autogenerated* from the file 123.sage
from sage.all_cmdline import *   # import sage library

_sage_const_9986181206512611598592286624664393671924626146542961561917623107324299900079426200143019329766321997475276820420249909782506163728549934796475706456649223 = Integer(9986181206512611598592286624664393671924626146542961561917623107324299900079426200143019329766321997475276820420249909782506163728549934796475706456649223); _sage_const_11385944545739505243309453021413343581862627405568851535031203747046911491020646858534290786863023336935616910212061846837392481767157767983384509885248767 = Integer(11385944545739505243309453021413343581862627405568851535031203747046911491020646858534290786863023336935616910212061846837392481767157767983384509885248767); _sage_const_105813626754830369767796578799226643889033227412658130226893708851110720416468059965713264658478299377654212587044247669928410442281831382577490105352633718272894531572352233211881056495752193201866649055622358234888531194346296702453105176147272971386928767457928148705433435309063146652094354833396307613911 = Integer(105813626754830369767796578799226643889033227412658130226893708851110720416468059965713264658478299377654212587044247669928410442281831382577490105352633718272894531572352233211881056495752193201866649055622358234888531194346296702453105176147272971386928767457928148705433435309063146652094354833396307613911); _sage_const_22334810767801800995021872014176778873829048161801414909315794486047873481911273730826962574216771288781 = Integer(22334810767801800995021872014176778873829048161801414909315794486047873481911273730826962574216771288781); _sage_const_64 = Integer(64); _sage_const_5 = Integer(5); _sage_const_2 = Integer(2); _sage_const_350 = Integer(350); _sage_const_200 = Integer(200); _sage_const_0p15 = RealNumber('0.15'); _sage_const_4900544356592211265646431814937281576562955146062 = Integer(4900544356592211265646431814937281576562955146062); _sage_const_7 = Integer(7)
from Crypto.Util.number import *
# p1 = getPrime(512)
# q1 = getPrime(512)
# print(p1,q1)

p1= _sage_const_9986181206512611598592286624664393671924626146542961561917623107324299900079426200143019329766321997475276820420249909782506163728549934796475706456649223 
q1= _sage_const_11385944545739505243309453021413343581862627405568851535031203747046911491020646858534290786863023336935616910212061846837392481767157767983384509885248767 


from Crypto.Util.number import *
# =================================
n1 = _sage_const_105813626754830369767796578799226643889033227412658130226893708851110720416468059965713264658478299377654212587044247669928410442281831382577490105352633718272894531572352233211881056495752193201866649055622358234888531194346296702453105176147272971386928767457928148705433435309063146652094354833396307613911 
# n2 = 20369481027961668058257949652346266097405331865071244844827896944882851755421021125005038786750268341013032202394581223828526073179263634639721089663050687773353438686984875196973012077948955566738301337866191557952973517042420660699281973702694965572488938789954679350791243570953680441483360036599350550534192027759384675611155970913348616382186229565994100357427843446265863186624731991521034305958565644266001622849342042747046352413268149901263629515623929619659379883036239511300563910486156582808698915297257307692017642458823600500445082987244477251123335410633989767118317681371314078169733374888688620813839
# leak1 = 110733171993470709195465104383246525062178362778220972191726705114514369848757940664883819735824778128179586221599072975207093223575285541338555960658178287486722693023393688158120847028382
# enc = 3724360314735337348015983350518926695244720487101059718828225257324872465291143851090607580822961202894850524395217010317254775500983396154162166500198523991652838543842978138662752717532358799622372813160573374563924704242911344052149200174619645796187521459916955545794017698320367273671936314947729523150627463505338870024421481261166504454532278895870561732979282672259730923724762173494886613682487373643406390205027508946750313076817576295795818790961232101069994823561840743308871216879655652136743807002025483269687509388947008928281179566366429525183899914275273098400627187051739816901887290337980735995613
# c = 38127787578353827234498259231834082660893046004292279030517959465543348558091033172704284501791369355347078715874056471582324178524957666710131669794646539355849074198396968523041568909435662208846480656877184197877122598569708545477705274221697660270808685794034776172296500330563270867517390911486555286886
leak2 = _sage_const_22334810767801800995021872014176778873829048161801414909315794486047873481911273730826962574216771288781 
# -==================================
# N = p1*q1
# pl = (p1 & ((1 << 350) - 1))>>5
N = n1
pl = leak2


for i in range(_sage_const_64 ):
    padding = i
    
    # print((pl<<5)+padding - (p1 & ((1 << 350) - 1)))
    par=(pl<<_sage_const_5 )+padding
    mod=pow(_sage_const_2 ,_sage_const_350 )

    PR = PolynomialRing(Zmod(N), names=('x',)); (x,) = PR._first_ngens(1)
    f=x*mod+par

    f=f.monic()
    tmp = f.small_roots(X=_sage_const_2 **_sage_const_200 ,beta=_sage_const_0p15 )
    print(i,tmp)  
x = _sage_const_4900544356592211265646431814937281576562955146062 
padding = _sage_const_7 
par=(pl<<_sage_const_5 )+padding
mod=pow(_sage_const_2 ,_sage_const_350 )
P = x*mod+par
print(GCD(P,n1))

    # p=par+res*mod
# q=ZZ(N)//ZZ(p)
# assert p*q==N
# d=inverse(65537,(p-1)*(q-1))
# long_to_bytes(ZZ(pow(c,d,N)))


