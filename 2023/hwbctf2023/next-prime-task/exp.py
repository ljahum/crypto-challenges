from Crypto.Util.number import *
from gmpy2 import *
# n= 16212823795921249015201513720149784272087058934998256111313253824205027920859214121063981513487904645940216957428441144762656821271607914704124385625054
# c= 42623448757142425965793058163308735025128962287288212456406034320792801149338160716972860425304842585118914774556604523599336877170146028573856917845178178543459331490175081849764083076168568374304256040399932392040329806010797252107241692940719624357821612728032794873653073208064739506588169944780568217733
e = 0x10001
n= 28576274811010794362153160897556935178530640825011441539841241257190782139295561904323347128956873569754645071205043238985141474388531008367238218822591
c= 49502875285578675438052554215266678403659290915102322948363030271494959804587081871467110614683972929037615883922743651431683465100061968204901334627149795829429950385848753728500177164800064208215503246868631076011505268371936586645321659884527055007299822625570713613996139223348709621258028349513737798120

N = n<<520
pd = iroot(N,2)[0]

p1 = pd -10000

for i in range(1000):
    p1 = next_prime(p1)
    p2 = next_prime(p1)
    tmp = (p1*p2)>>520
    if(tmp == n):
        print(tmp - n)
        print(i)
        n1 = p1*p2
        phi = (p1-1)*(p2-1)
        d = inverse(e,phi)  
        m1 = pow(c,d,n1)
        print(long_to_bytes(m1))



