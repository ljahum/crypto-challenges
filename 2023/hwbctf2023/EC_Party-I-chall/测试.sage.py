

# This file was *autogenerated* from the file 测试.sage
from sage.all_cmdline import *   # import sage library

_sage_const_16 = Integer(16); _sage_const_38281489082742950519739482360021254704273168171152864761073226503149232982435506838073524138241160099731785851894107 = Integer(38281489082742950519739482360021254704273168171152864761073226503149232982435506838073524138241160099731785851894107); _sage_const_38281489082742950519739482360021254704273168171152864761080198563830150411949520592040476681048756889342628477146332 = Integer(38281489082742950519739482360021254704273168171152864761080198563830150411949520592040476681048756889342628477146332); _sage_const_25133968249322500646409604100795370858495084148166238598546781970954162994450336793839389721185954073843936219070865 = Integer(25133968249322500646409604100795370858495084148166238598546781970954162994450336793839389721185954073843936219070865); _sage_const_25133968249322500646409604100795370858495084148166238598544029755517421752648945465482783626125485258402446288520923 = Integer(25133968249322500646409604100795370858495084148166238598544029755517421752648945465482783626125485258402446288520923); _sage_const_11523003251444158217609428275859704389443091443029975501269997593723191369825851246160426659075889208103425260426643 = Integer(11523003251444158217609428275859704389443091443029975501269997593723191369825851246160426659075889208103425260426643); _sage_const_21529010254160581103369472076461247859944069093950413652067225923712384421452177767121972357699670068023100877236223 = Integer(21529010254160581103369472076461247859944069093950413652067225923712384421452177767121972357699670068023100877236223); _sage_const_0x10001 = Integer(0x10001); _sage_const_1 = Integer(1); _sage_const_525311942641945708390147781507596749969196812811000889691345476646318186994085683578800050725565509577221715530239985837506361142143941711318904075727231172922985263594384766739838523660574695459398121029690037774990876499568993240 = Integer(525311942641945708390147781507596749969196812811000889691345476646318186994085683578800050725565509577221715530239985837506361142143941711318904075727231172922985263594384766739838523660574695459398121029690037774990876499568993240); _sage_const_356653736214902128864207197924380678392283792734565867415941859228942881302582459163146956506356427740103946157631993993113281357613257032852117330424798910434840163877071270171742069993984712079166532859768177981988467217025261148 = Integer(356653736214902128864207197924380678392283792734565867415941859228942881302582459163146956506356427740103946157631993993113281357613257032852117330424798910434840163877071270171742069993984712079166532859768177981988467217025261148); _sage_const_0 = Integer(0)
import os
import random
from Crypto.Util.number import *
# from secret import flag


# assert flag[:5]==b'flag{' and flag[-1:]==b'}'
# flag = flag[5:-1]
# m = bytes_to_long(flag)
flag= b'0'*_sage_const_16 


# m = m+os.urandom(32)
# print('m=',m)
m= b'0000000000000000\xec\x8f\x0f^\x98\xa1#\x8c\xd1\x93$Q\x93\xe9;n>\xef\xf8.\xcflu\t\xa8\xf1\x13\xa9\x90\xb5Vb'

# p = getPrime(384)
# q = getPrime(384)
p    =  _sage_const_38281489082742950519739482360021254704273168171152864761073226503149232982435506838073524138241160099731785851894107 
ord_p =  _sage_const_38281489082742950519739482360021254704273168171152864761080198563830150411949520592040476681048756889342628477146332 

ord_q =  _sage_const_25133968249322500646409604100795370858495084148166238598546781970954162994450336793839389721185954073843936219070865 
q     =  _sage_const_25133968249322500646409604100795370858495084148166238598544029755517421752648945465482783626125485258402446288520923 
'''

p    =   382814890827429505197394823600212547042731681711528647610 73226503149232982435506838073524138241160099731785851894107
ord_p =  382814890827429505197394823600212547042731681711528647610 80198563830150411949520592040476681048756889342628477146332

ord_q =  2513396824932250064640960410079537085849508414816623859854 6781970954162994450336793839389721185954073843936219070865
q     =  2513396824932250064640960410079537085849508414816623859854 4029755517421752648945465482783626125485258402446288520923

'''
a =  _sage_const_11523003251444158217609428275859704389443091443029975501269997593723191369825851246160426659075889208103425260426643 
b =  _sage_const_21529010254160581103369472076461247859944069093950413652067225923712384421452177767121972357699670068023100877236223 

# print('p=',p)
# print('q=',q)
Fp = GF(p)
Fq = GF(q)
n = p*q
# e = 2
e = _sage_const_0x10001 

# a = random.randint(0, p-1)
# b = random.randint(0, p-1)
# print("a = ",a)
# print("b = ",b)
Ep = EllipticCurve(Zmod(p), [a, b])
Eq = EllipticCurve(Zmod(q), [a, b])
En = EllipticCurve(Zmod(n), [a, b])
# ord_p = Ep.order()
# ord_q = Eq.order()
ord_p =  _sage_const_38281489082742950519739482360021254704273168171152864761080198563830150411949520592040476681048756889342628477146332 
ord_q =  _sage_const_25133968249322500646409604100795370858495084148166238598546781970954162994450336793839389721185954073843936219070865 
# print('ord_p = ',ord_p)
# print('ord_q = ',ord_q)

xm = bytes_to_long(m)
while True:
    try:
        Gp = Ep.lift_x(Fp(xm))
        Gq = Eq.lift_x(Fq(xm))
        ym = crt([int(Gp.xy()[_sage_const_1 ]),int(Gq.xy()[_sage_const_1 ])],[p,q])
        break
    except :
        xm += _sage_const_1 
        continue

print("xm = ",xm)
M = En((xm,ym))
C = e*M
pk = [a, b, n, C]
leak = ord_p*ord_q
# print(leak)
# print("c = ",C)
c = (_sage_const_525311942641945708390147781507596749969196812811000889691345476646318186994085683578800050725565509577221715530239985837506361142143941711318904075727231172922985263594384766739838523660574695459398121029690037774990876499568993240  ,
    _sage_const_356653736214902128864207197924380678392283792734565867415941859228942881302582459163146956506356427740103946157631993993113281357613257032852117330424798910434840163877071270171742069993984712079166532859768177981988467217025261148 )
cx = _sage_const_525311942641945708390147781507596749969196812811000889691345476646318186994085683578800050725565509577221715530239985837506361142143941711318904075727231172922985263594384766739838523660574695459398121029690037774990876499568993240 
n1 = ord_p
n2 = ord_q
cp = Ep.lift_x(Integer(cx))
cq = Eq.lift_x(Integer(cx))


# phi = (n1*n2)//GCD(n1,n2)
# phi = n1*n2
dp = inverse(e, n1)
dq = inverse(e, n2)

mp = (dp * cp).xy()[_sage_const_0 ]
mq = (dq * cq).xy()[_sage_const_0 ]

flag = CRT_list([ZZ(mp), ZZ(mq)], [p, q])
print(flag)

# d = inverse(e,phi)
# d = int(n)
# m1 = d*C
# print('m1=' , m1)



    # return pk, leak


# print(rabin(flag))
"""
[138681122158674534796479818810828100269024674330030901179877002756402543027343312824423418859769980312713625658733, 4989541340743108588577899263469059346332852532421276369038720203527706762720292559751463880310075002363945271507040, 762981334990685089884160169295988791471426441106522959345412318178660817286272606245181160960267776171409174142433857335352402619564485470678152764621235882232914864951345067231483720755544188962798600739631026707678945887174897543, (19591102741441427006422487362547101973286873135330241799412389205281057650306427438686318050682578531286702107543065985988634367524715153650482199099194389191525898366546842016339136884277515665890331906261550080128989942048438965, 728465071542637655949094554469510039681717865811604984652385614821789556549826602178972137405550902004858456181137844771163710123158955524137202319902378503104952106036911634918189377295743976966073577013775200078470659428344462772), 762981334990685089884160169295988791471426441106522959345445792076415993922016249232021560266153453470937452118572318136597282436269660557904217923887981072203978473274822142705255987334355747997513083011853917049784914749699536828]
"""


