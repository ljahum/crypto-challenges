n=73822410148110759760164946405270228269255384237831275745269402590230495569279769799226813942899942423718229747478982630879557319063920515141217164980012063064986634632452289290326704640527699568662492105204165609614169349755365956569362139057327962393611139347462018186440108621311077722819578905265976612923      
c=71808322808599218331233291542779486534747913572475630198802984648982830332628443972652322590637382696027943799004331488098592525306523343649935216419522329722152742610560398216737030893090641493326477786720839849938277402743820773957184083430369443325368720115515840174745825798187125454448297155036065857691      


# leakBits = 262
leak=2223117424030234543005449667053988296724455736030907136592525175314696509716321 # 261 
e=65537
def getpq(p,q, i):
    if p*q > n:
        #print('A', i)
        return 
    tail = (1<<i)-1   #后i位置1
    if (p|tail)*(q|tail) < n:
        #print('B:', i, hex(p|tail), hex(q|tail))
        return 
    if p*q == n:
        print('p=',p)
        print('q=',q)
        return 
    i -= 1
    if p_xor_q & (1<<i) == 0:
        getpq(p^(1<<i), q^(1<<i), i)
        getpq(p,q,i)
    else:
        getpq(p^(1<<i), q, i)
        getpq(p,q^(1<<i),i)
        
print(n.bit_length(), p_xor_q.bit_length())  #4096 2047
import sys
sys.setrecursionlimit(3000)
  
getpq(3<<2046,1<<2047, 2046)
 