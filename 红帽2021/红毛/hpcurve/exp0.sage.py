

# This file was *autogenerated* from the file exp0.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10000000000000001119 = Integer(10000000000000001119); _sage_const_7 = Integer(7); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_11 = Integer(11); _sage_const_22 = Integer(22); _sage_const_33 = Integer(33); _sage_const_8 = Integer(8); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2)
import itertools
import struct

p = _sage_const_10000000000000001119 

R = GF(p)['x']; (x,) = R._first_ngens(1); y=x
f = y + y**_sage_const_7 
C = HyperellipticCurve(f, _sage_const_0 )
J = C.jacobian()
Ds = [J(C(x, min(f(x).sqrt(_sage_const_0 ,_sage_const_1 )))) for x in (_sage_const_11 ,_sage_const_22 ,_sage_const_33 )]

enc = bytes.fromhex('a0955c882185b50a69d9d19a24778519d6da23894e667d7130b495b645caac72163d242923caa00af845f25890')
known_pt = 'Hello! The flag is: hxp{'.encode()

rng_output = bytes(e^m for e,m in zip(enc, known_pt))
print(len(rng_output))
blocks = [rng_output[i:i+_sage_const_8 ] for i in range(_sage_const_0 , len(rng_output), _sage_const_8 )]
ui = [int.from_bytes(r, 'little') for r in blocks]
u = x**_sage_const_3  + ui[_sage_const_2 ]*x**_sage_const_2  + ui[_sage_const_1 ]*x + ui[_sage_const_0 ]

L = GF(p).algebraic_closure()
roots = [r[_sage_const_0 ] for r in u.change_ring(L).roots()]

RR = PolynomialRing(L, names=('zz',)); (zz,) = RR._first_ngens(1)
v = RR.lagrange_polynomial([(xi, f(xi).sqrt()) for xi in roots])
vi = [v.coefficients()[i].as_finite_field_element()[_sage_const_1 ] for i in range(_sage_const_3 )]
vi = [(int(-c), int(c)) for c in vi]

for rs in itertools.product(*vi):
    q = struct.pack('<'+'Q'*len(rs), *rs)
    print(len(rng_output+q))
    flag = bytes(k^m for k,m in zip(rng_output+q, enc))
    print(flag)

